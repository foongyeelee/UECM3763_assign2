import pylab as p
import numpy as np

# Setup parameters
alpha = 1;theta = 0.064;sigma = 0.27;
R0 = 3
n_path = 1000 #number of simulations
n = 1000 #number of partitions
t = 1.0
#Generating Brownian motions
dt = t / n
T = p.linspace(0,t,n+1)[:-1]
dB = p.randn(n_path,n+1)*p.sqrt(dt); 
dB[:,0]=0
B = dB.cumsum(axis=1);
R=p.zeros_like(B);
R[:,0]=R0;
col=0
for col in range (n):
    R[:,col+1]=R[:,col]+(theta-R[:,col])*dt + sigma*R[:,col]*dB[:,col+1]

# Plot 5 realizations of Mean Reversal Process
R_plot=R[0:5:,:-1]
p.plot(T,R_plot.transpose())
p.title('5 realizations of the mean reversal process with $\\alpha$ = '+ str(alpha)+'\n $\\theta$ = '+str(theta)+' and $\\sigma$ ='+str(sigma))
p.xlabel('Time,$t$')
p.ylabel('R(t)')
p.show()

#Calculations
R_t1 = R[:,-1]
E_R_t1=np.mean(R_t1) 
print('The expectation value of R(1),E(R(1)) =',E_R_t1)
mask = R_t1 >2
prob_R_t1_more_than_2 = sum (mask)/n_path;
print('Probability that R(1)>2, P(R(1)>2) =',prob_R_t1_more_than_2)